{"content": {"suites": {"0": {"status": {"total_pass": 7, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 5}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_lm_regression_suite[Advtracking]", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_lm_regression_suite[Kynection]", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_lm_regression_suite[Sensium]", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_lm_regression_suite[Simplyunified]", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_lm_regression_suite[Tcvsat]", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_lm_regression_suite[Intellitrac]", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_lm_regression_suite[Magtec]", "rerun": "0"}, "7": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[Easitrack]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/user/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n>       driver.get(\"https://admin.lightmetrics.co/\")\n\nconftest.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7d42b055c4c0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...\\\\n#23 0x562dcaf3c723 \\\\u003Cunknown>\\\\n#24 0x562dcaf4d0e4 \\\\u003Cunknown>\\\\n#25 0x7d7349c94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=122.0.6261.111)\nE       Stacktrace:\nE       #0 0x562dcaf4df33 <unknown>\nE       #1 0x562dcac45ce6 <unknown>\nE       #2 0x562dcac3dd03 <unknown>\nE       #3 0x562dcac2dceb <unknown>\nE       #4 0x562dcac2f145 <unknown>\nE       #5 0x562dcac2e005 <unknown>\nE       #6 0x562dcac2cf09 <unknown>\nE       #7 0x562dcac2cdb3 <unknown>\nE       #8 0x562dcac2b814 <unknown>\nE       #9 0x562dcac2bdaa <unknown>\nE       #10 0x562dcac4849e <unknown>\nE       #11 0x562dcacd2445 <unknown>\nE       #12 0x562dcacb2eb2 <unknown>\nE       #13 0x562dcacd1899 <unknown>\nE       #14 0x562dcacb2c53 <unknown>\nE       #15 0x562dcac83db3 <unknown>\nE       #16 0x562dcac8477e <unknown>\nE       #17 0x562dcaf1386b <unknown>\nE       #18 0x562dcaf17885 <unknown>\nE       #19 0x562dcaf01181 <unknown>\nE       #20 0x562dcaf18412 <unknown>\nE       #21 0x562dcaee525f <unknown>\nE       #22 0x562dcaf3c528 <unknown>\nE       #23 0x562dcaf3c723 <unknown>\nE       #24 0x562dcaf4d0e4 <unknown>\nE       #25 0x7d7349c94ac3 <unknown>\n\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException\n", "test_name": "test_lm_regression_suite[Easitrack]", "rerun": "0"}, "8": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[Iotab]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/user/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n>       driver.get(\"https://admin.lightmetrics.co/\")\n\nconftest.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7d42b05946a0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...\\\\n#23 0x5cbb48f53723 \\\\u003Cunknown>\\\\n#24 0x5cbb48f640e4 \\\\u003Cunknown>\\\\n#25 0x7a3c76294ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=122.0.6261.111)\nE       Stacktrace:\nE       #0 0x5cbb48f64f33 <unknown>\nE       #1 0x5cbb48c5cce6 <unknown>\nE       #2 0x5cbb48c54d03 <unknown>\nE       #3 0x5cbb48c44ceb <unknown>\nE       #4 0x5cbb48c46145 <unknown>\nE       #5 0x5cbb48c45005 <unknown>\nE       #6 0x5cbb48c43f09 <unknown>\nE       #7 0x5cbb48c43db3 <unknown>\nE       #8 0x5cbb48c42814 <unknown>\nE       #9 0x5cbb48c42daa <unknown>\nE       #10 0x5cbb48c5f49e <unknown>\nE       #11 0x5cbb48ce9445 <unknown>\nE       #12 0x5cbb48cc9eb2 <unknown>\nE       #13 0x5cbb48ce8899 <unknown>\nE       #14 0x5cbb48cc9c53 <unknown>\nE       #15 0x5cbb48c9adb3 <unknown>\nE       #16 0x5cbb48c9b77e <unknown>\nE       #17 0x5cbb48f2a86b <unknown>\nE       #18 0x5cbb48f2e885 <unknown>\nE       #19 0x5cbb48f18181 <unknown>\nE       #20 0x5cbb48f2f412 <unknown>\nE       #21 0x5cbb48efc25f <unknown>\nE       #22 0x5cbb48f53528 <unknown>\nE       #23 0x5cbb48f53723 <unknown>\nE       #24 0x5cbb48f640e4 <unknown>\nE       #25 0x7a3c76294ac3 <unknown>\n\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException\n", "test_name": "test_lm_regression_suite[Iotab]", "rerun": "0"}, "9": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[Geotab]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/user/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n>       driver.get(\"https://admin.lightmetrics.co/\")\n\nconftest.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7d42b0598370>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...\\\\n#23 0x5c70d485a723 \\\\u003Cunknown>\\\\n#24 0x5c70d486b0e4 \\\\u003Cunknown>\\\\n#25 0x70e367894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=122.0.6261.111)\nE       Stacktrace:\nE       #0 0x5c70d486bf33 <unknown>\nE       #1 0x5c70d4563ce6 <unknown>\nE       #2 0x5c70d455bd03 <unknown>\nE       #3 0x5c70d454bceb <unknown>\nE       #4 0x5c70d454d145 <unknown>\nE       #5 0x5c70d454c005 <unknown>\nE       #6 0x5c70d454af09 <unknown>\nE       #7 0x5c70d454adb3 <unknown>\nE       #8 0x5c70d4549814 <unknown>\nE       #9 0x5c70d4549daa <unknown>\nE       #10 0x5c70d456649e <unknown>\nE       #11 0x5c70d45f0445 <unknown>\nE       #12 0x5c70d45d0eb2 <unknown>\nE       #13 0x5c70d45ef899 <unknown>\nE       #14 0x5c70d45d0c53 <unknown>\nE       #15 0x5c70d45a1db3 <unknown>\nE       #16 0x5c70d45a277e <unknown>\nE       #17 0x5c70d483186b <unknown>\nE       #18 0x5c70d4835885 <unknown>\nE       #19 0x5c70d481f181 <unknown>\nE       #20 0x5c70d4836412 <unknown>\nE       #21 0x5c70d480325f <unknown>\nE       #22 0x5c70d485a528 <unknown>\nE       #23 0x5c70d485a723 <unknown>\nE       #24 0x5c70d486b0e4 <unknown>\nE       #25 0x70e367894ac3 <unknown>\n\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException\n", "test_name": "test_lm_regression_suite[Geotab]", "rerun": "0"}, "10": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[Blackboxcontrol]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/user/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n>       driver.get(\"https://admin.lightmetrics.co/\")\n\nconftest.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7d42b059a7a0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...\\\\n#23 0x560754d6a723 \\\\u003Cunknown>\\\\n#24 0x560754d7b0e4 \\\\u003Cunknown>\\\\n#25 0x76d263e94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=122.0.6261.111)\nE       Stacktrace:\nE       #0 0x560754d7bf33 <unknown>\nE       #1 0x560754a73ce6 <unknown>\nE       #2 0x560754a6bd03 <unknown>\nE       #3 0x560754a5bceb <unknown>\nE       #4 0x560754a5d145 <unknown>\nE       #5 0x560754a5c005 <unknown>\nE       #6 0x560754a5af09 <unknown>\nE       #7 0x560754a5adb3 <unknown>\nE       #8 0x560754a59814 <unknown>\nE       #9 0x560754a59daa <unknown>\nE       #10 0x560754a7649e <unknown>\nE       #11 0x560754b00445 <unknown>\nE       #12 0x560754ae0eb2 <unknown>\nE       #13 0x560754aff899 <unknown>\nE       #14 0x560754ae0c53 <unknown>\nE       #15 0x560754ab1db3 <unknown>\nE       #16 0x560754ab277e <unknown>\nE       #17 0x560754d4186b <unknown>\nE       #18 0x560754d45885 <unknown>\nE       #19 0x560754d2f181 <unknown>\nE       #20 0x560754d46412 <unknown>\nE       #21 0x560754d1325f <unknown>\nE       #22 0x560754d6a528 <unknown>\nE       #23 0x560754d6a723 <unknown>\nE       #24 0x560754d7b0e4 <unknown>\nE       #25 0x76d263e94ac3 <unknown>\n\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException\n", "test_name": "test_lm_regression_suite[Blackboxcontrol]", "rerun": "0"}, "11": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[Spireonstage]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/user/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n>       driver.get(\"https://admin.lightmetrics.co/\")\n\nconftest.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7d42b0594df0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...\\\\n#23 0x593937159723 \\\\u003Cunknown>\\\\n#24 0x59393716a0e4 \\\\u003Cunknown>\\\\n#25 0x7c8340494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=122.0.6261.111)\nE       Stacktrace:\nE       #0 0x59393716af33 <unknown>\nE       #1 0x593936e62ce6 <unknown>\nE       #2 0x593936e5ad03 <unknown>\nE       #3 0x593936e4aceb <unknown>\nE       #4 0x593936e4c145 <unknown>\nE       #5 0x593936e4b005 <unknown>\nE       #6 0x593936e49f09 <unknown>\nE       #7 0x593936e49db3 <unknown>\nE       #8 0x593936e48814 <unknown>\nE       #9 0x593936e48daa <unknown>\nE       #10 0x593936e6549e <unknown>\nE       #11 0x593936eef445 <unknown>\nE       #12 0x593936ecfeb2 <unknown>\nE       #13 0x593936eee899 <unknown>\nE       #14 0x593936ecfc53 <unknown>\nE       #15 0x593936ea0db3 <unknown>\nE       #16 0x593936ea177e <unknown>\nE       #17 0x59393713086b <unknown>\nE       #18 0x593937134885 <unknown>\nE       #19 0x59393711e181 <unknown>\nE       #20 0x593937135412 <unknown>\nE       #21 0x59393710225f <unknown>\nE       #22 0x593937159528 <unknown>\nE       #23 0x593937159723 <unknown>\nE       #24 0x59393716a0e4 <unknown>\nE       #25 0x7c8340494ac3 <unknown>\n\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException\n", "test_name": "test_lm_regression_suite[Spireonstage]", "rerun": "0"}}, "suite_name": "test_LM_RegressionSuite.py"}}}, "date": "January 16, 2025", "start_time": 1737009419.1820798, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "7", "fail": "0", "skip": "0", "error": "5", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "12"}