{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[Lmpresales]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/user/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n        driver.get(\"https://admin-qa.lightmetrics.co/\")\n>       driver.maximize_window()\n\nconftest.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:499: in maximize_window\n    self.execute(command, None)\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7abbaac59390>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x64385bd19723 \\\\u003Cunknown>\\\\n#15 0x64385bd2a0e4 \\\\u003Cunknown>\\\\n#16 0x7c753ea94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=122.0.6261.111)\nE       Stacktrace:\nE       #0 0x64385bd2af33 <unknown>\nE       #1 0x64385ba22ce6 <unknown>\nE       #2 0x64385b9f98cd <unknown>\nE       #3 0x64385ba9876d <unknown>\nE       #4 0x64385baae226 <unknown>\nE       #5 0x64385ba8fc53 <unknown>\nE       #6 0x64385ba60db3 <unknown>\nE       #7 0x64385ba6177e <unknown>\nE       #8 0x64385bcf086b <unknown>\nE       #9 0x64385bcf4885 <unknown>\nE       #10 0x64385bcde181 <unknown>\nE       #11 0x64385bcf5412 <unknown>\nE       #12 0x64385bcc225f <unknown>\nE       #13 0x64385bd19528 <unknown>\nE       #14 0x64385bd19723 <unknown>\nE       #15 0x64385bd2a0e4 <unknown>\nE       #16 0x7c753ea94ac3 <unknown>\n\n../venv/binr/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_lm_regression_suite[Lmpresales]", "rerun": "0"}}, "suite_name": "test_LM_RegressionSuite.py"}}}, "date": "May 22, 2025", "start_time": 1747894881.0530071, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}