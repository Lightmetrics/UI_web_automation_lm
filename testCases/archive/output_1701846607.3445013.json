{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 6}, "tests": {"0": {"status": "FAIL", "message": "   selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\n   from unknown error: web view not found\n     (Session info: chrome=119.0.6045.159)\n   Stacktrace:\n   #0 0x564cec8995e3 <unknown>\n   #1 0x564cec55c0b7 <unknown>\n   #2 0x564cec5301b8 <unknown>\n   #3 0x564cec5d66ef <unknown>\n   #4 0x564cec5ec306 <unknown>\n   #5 0x564cec5d0cc3 <unknown>\n   #6 0x564cec59c0e4 <unknown>\n   #7 0x564cec59d0ae <unknown>\n   #8 0x564cec85fce1 <unknown>\n   #9 0x564cec863b7e <unknown>\n   #10 0x564cec84d4b5 <unknown>\n   #11 0x564cec8647d6 <unknown>\n   #12 0x564cec830dbf <unknown>\n   #13 0x564cec887748 <unknown>\n   #14 0x564cec887917 <unknown>\n   #15 0x564cec898773 <unknown>\n   #16 0x7f3fae297ada <unknown>\n", "test_name": "test_lm_regression_suite[Kynection]", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[Fleetilla]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/a/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n        driver.get(\"https://admin.lightmetrics.co/statistics\")\n>       driver.maximize_window()\n\nconftest.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:499: in maximize_window\n    self.execute(command, None)\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fdad465f1d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x56506f71d917 \\\\u003Cunknown>\\\\n#15 0x56506f72e773 \\\\u003Cunknown>\\\\n#16 0x7f29bd297ada \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x56506f72f5e3 <unknown>\nE       #1 0x56506f3f20b7 <unknown>\nE       #2 0x56506f3c61b8 <unknown>\nE       #3 0x56506f46c6ef <unknown>\nE       #4 0x56506f482306 <unknown>\nE       #5 0x56506f466cc3 <unknown>\nE       #6 0x56506f4320e4 <unknown>\nE       #7 0x56506f4330ae <unknown>\nE       #8 0x56506f6f5ce1 <unknown>\nE       #9 0x56506f6f9b7e <unknown>\nE       #10 0x56506f6e34b5 <unknown>\nE       #11 0x56506f6fa7d6 <unknown>\nE       #12 0x56506f6c6dbf <unknown>\nE       #13 0x56506f71d748 <unknown>\nE       #14 0x56506f71d917 <unknown>\nE       #15 0x56506f72e773 <unknown>\nE       #16 0x7f29bd297ada <unknown>\n\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_lm_regression_suite[Fleetilla]", "rerun": "0"}, "2": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[IntelliTrac]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/a/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n        driver.get(\"https://admin.lightmetrics.co/statistics\")\n>       driver.maximize_window()\n\nconftest.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:499: in maximize_window\n    self.execute(command, None)\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fdad5147e50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x5563a9f05917 \\\\u003Cunknown>\\\\n#15 0x5563a9f16773 \\\\u003Cunknown>\\\\n#16 0x7f05a2e97ada \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x5563a9f175e3 <unknown>\nE       #1 0x5563a9bda0b7 <unknown>\nE       #2 0x5563a9bae1b8 <unknown>\nE       #3 0x5563a9c546ef <unknown>\nE       #4 0x5563a9c6a306 <unknown>\nE       #5 0x5563a9c4ecc3 <unknown>\nE       #6 0x5563a9c1a0e4 <unknown>\nE       #7 0x5563a9c1b0ae <unknown>\nE       #8 0x5563a9eddce1 <unknown>\nE       #9 0x5563a9ee1b7e <unknown>\nE       #10 0x5563a9ecb4b5 <unknown>\nE       #11 0x5563a9ee27d6 <unknown>\nE       #12 0x5563a9eaedbf <unknown>\nE       #13 0x5563a9f05748 <unknown>\nE       #14 0x5563a9f05917 <unknown>\nE       #15 0x5563a9f16773 <unknown>\nE       #16 0x7f05a2e97ada <unknown>\n\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_lm_regression_suite[IntelliTrac]", "rerun": "0"}, "3": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[Magtec]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/a/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n        driver.get(\"https://admin.lightmetrics.co/statistics\")\n>       driver.maximize_window()\n\nconftest.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:499: in maximize_window\n    self.execute(command, None)\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fdad46666d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x55abe9cb7917 \\\\u003Cunknown>\\\\n#15 0x55abe9cc8773 \\\\u003Cunknown>\\\\n#16 0x7efd2f297ada \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x55abe9cc95e3 <unknown>\nE       #1 0x55abe998c0b7 <unknown>\nE       #2 0x55abe99601b8 <unknown>\nE       #3 0x55abe9a066ef <unknown>\nE       #4 0x55abe9a1c306 <unknown>\nE       #5 0x55abe9a00cc3 <unknown>\nE       #6 0x55abe99cc0e4 <unknown>\nE       #7 0x55abe99cd0ae <unknown>\nE       #8 0x55abe9c8fce1 <unknown>\nE       #9 0x55abe9c93b7e <unknown>\nE       #10 0x55abe9c7d4b5 <unknown>\nE       #11 0x55abe9c947d6 <unknown>\nE       #12 0x55abe9c60dbf <unknown>\nE       #13 0x55abe9cb7748 <unknown>\nE       #14 0x55abe9cb7917 <unknown>\nE       #15 0x55abe9cc8773 <unknown>\nE       #16 0x7efd2f297ada <unknown>\n\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_lm_regression_suite[Magtec]", "rerun": "0"}, "4": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[IDriveCam]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/a/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n        driver.get(\"https://admin.lightmetrics.co/statistics\")\n>       driver.maximize_window()\n\nconftest.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:499: in maximize_window\n    self.execute(command, None)\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fdad46fae10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x55d0052e3917 \\\\u003Cunknown>\\\\n#15 0x55d0052f4773 \\\\u003Cunknown>\\\\n#16 0x7f1ac0a97ada \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x55d0052f55e3 <unknown>\nE       #1 0x55d004fb80b7 <unknown>\nE       #2 0x55d004f8c1b8 <unknown>\nE       #3 0x55d0050326ef <unknown>\nE       #4 0x55d005048306 <unknown>\nE       #5 0x55d00502ccc3 <unknown>\nE       #6 0x55d004ff80e4 <unknown>\nE       #7 0x55d004ff90ae <unknown>\nE       #8 0x55d0052bbce1 <unknown>\nE       #9 0x55d0052bfb7e <unknown>\nE       #10 0x55d0052a94b5 <unknown>\nE       #11 0x55d0052c07d6 <unknown>\nE       #12 0x55d00528cdbf <unknown>\nE       #13 0x55d0052e3748 <unknown>\nE       #14 0x55d0052e3917 <unknown>\nE       #15 0x55d0052f4773 <unknown>\nE       #16 0x7f1ac0a97ada <unknown>\n\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_lm_regression_suite[IDriveCam]", "rerun": "0"}, "5": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[MachineMax]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/a/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n        driver.get(\"https://admin.lightmetrics.co/statistics\")\n>       driver.maximize_window()\n\nconftest.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:499: in maximize_window\n    self.execute(command, None)\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fdad4662990>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x55853ee6b917 \\\\u003Cunknown>\\\\n#15 0x55853ee7c773 \\\\u003Cunknown>\\\\n#16 0x7f3131a97ada \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x55853ee7d5e3 <unknown>\nE       #1 0x55853eb400b7 <unknown>\nE       #2 0x55853eb141b8 <unknown>\nE       #3 0x55853ebba6ef <unknown>\nE       #4 0x55853ebd0306 <unknown>\nE       #5 0x55853ebb4cc3 <unknown>\nE       #6 0x55853eb800e4 <unknown>\nE       #7 0x55853eb810ae <unknown>\nE       #8 0x55853ee43ce1 <unknown>\nE       #9 0x55853ee47b7e <unknown>\nE       #10 0x55853ee314b5 <unknown>\nE       #11 0x55853ee487d6 <unknown>\nE       #12 0x55853ee14dbf <unknown>\nE       #13 0x55853ee6b748 <unknown>\nE       #14 0x55853ee6b917 <unknown>\nE       #15 0x55853ee7c773 <unknown>\nE       #16 0x7f3131a97ada <unknown>\n\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_lm_regression_suite[MachineMax]", "rerun": "0"}, "6": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_lm_regression_suite[Advtracking]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            options = Options()\n            # options.add_argument('--headless')\n            options.add_argument('--no-sandbox')\n            options.add_argument('--disable-dev-shm-usage')\n            # driver = webdriver.Chrome(ChromeDriverManager().install())\n            driver = webdriver.Chrome(service=Service(\"/home/a/Downloads/chromedriver-linux64/chromedriver\"))\n            # driver = webdriver.Chrome(executable_path=\"C:\\\\chromedriver.exe\")\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"C:\\\\geckodriver.exe\")\n        elif browser_name == \"IE\":\n            print(\"IE driver\")\n        driver.get(\"https://admin.lightmetrics.co/statistics\")\n>       driver.maximize_window()\n\nconftest.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:499: in maximize_window\n    self.execute(command, None)\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fdad456d0d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x55a6902f8917 \\\\u003Cunknown>\\\\n#15 0x55a690309773 \\\\u003Cunknown>\\\\n#16 0x7ff86fe97ada \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.159)\nE       Stacktrace:\nE       #0 0x55a69030a5e3 <unknown>\nE       #1 0x55a68ffcd0b7 <unknown>\nE       #2 0x55a68ffa11b8 <unknown>\nE       #3 0x55a6900476ef <unknown>\nE       #4 0x55a69005d306 <unknown>\nE       #5 0x55a690041cc3 <unknown>\nE       #6 0x55a69000d0e4 <unknown>\nE       #7 0x55a69000e0ae <unknown>\nE       #8 0x55a6902d0ce1 <unknown>\nE       #9 0x55a6902d4b7e <unknown>\nE       #10 0x55a6902be4b5 <unknown>\nE       #11 0x55a6902d57d6 <unknown>\nE       #12 0x55a6902a1dbf <unknown>\nE       #13 0x55a6902f8748 <unknown>\nE       #14 0x55a6902f8917 <unknown>\nE       #15 0x55a690309773 <unknown>\nE       #16 0x7ff86fe97ada <unknown>\n\n../venv/bi/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_lm_regression_suite[Advtracking]", "rerun": "0"}}, "suite_name": "test_LM_RegressionSuite.py"}}}, "date": "December 06, 2023", "start_time": 1701844861.9273033, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "1", "skip": "0", "error": "6", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "7"}